{"ast":null,"code":"var _jsxFileName = \"/Users/david/digiReact/react0412/src/HelloWrite.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HeroWrite(props) {\n  _s();\n  const [hero_name, setHeroName] = useState('');\n  const [hero_desc, setHeroDesc] = useState('');\n  const heroNameChange = e => {\n    setHeroName(e.target.value);\n  };\n  useEffect(() => {\n    /* console.log('나 호출된다.');\n    setHeroList(\n      heroList.concat([\n        { id: 1, name: '이순신', desc: '이마트근처삼' },\n        { id: 2, name: '홍길동', desc: '옆집수퍼에삼' },\n        { id: 3, name: '세종대왕', desc: '홈플러스 근처삼' },\n      ])\n    ); */\n    axios.get('http://localhost:9090/hero/list').then(res => {\n      setHeroList(res.data);\n      setLoading(true);\n    }).catch((res, status, error) => {\n      console.log(status);\n      console.log(error);\n    });\n  }, []);\n  const heroDescChange = e => {\n    setHeroDesc(e.target.value);\n  };\n  const onSubmit = e => {\n    /*\n        Spring은 데이터를 문자로 받아야 한다\n        Axios는 JSON으로 데이터를 주고 받는다.\n    */\n    e.preventDefault();\n    axios.post('http://localhost:9090/hero/write', {\n      hero_name: hero_name,\n      hero_desc: hero_desc\n    }).then(res => {\n      console.log(res.data.result);\n    }).catch(error => {\n      console.log(error);\n    });\n    /*\n        form 태그를 통해 서버에 정보를 전송전에 호출된다.\n        버튼의 기본 기능을 정지시킨다. submit버튼의 submit 기능을 막고,\n        별도의 처리를 한다.\n    */\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uC601\\uC6C5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \"\\uC774\\uB984 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: heroNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }, this), \"\\uC5C5\\uC801 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: heroDescChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"\\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [hero_name, \" \", hero_desc]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(HeroWrite, \"bXLrRRUoK466q1AD0UGZ454z3hE=\");\n_c = HeroWrite;\nexport default HeroWrite;\nvar _c;\n$RefreshReg$(_c, \"HeroWrite\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","HeroWrite","props","_s","hero_name","setHeroName","hero_desc","setHeroDesc","heroNameChange","e","target","value","get","then","res","setHeroList","data","setLoading","catch","status","error","console","log","heroDescChange","onSubmit","preventDefault","post","result","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/Users/david/digiReact/react0412/src/HelloWrite.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nfunction HeroWrite(props) {\n  const [hero_name, setHeroName] = useState('');\n  const [hero_desc, setHeroDesc] = useState('');\n  const heroNameChange = (e) => {\n    setHeroName(e.target.value);\n  };\n\n  useEffect(() => {\n    /* console.log('나 호출된다.');\n    setHeroList(\n      heroList.concat([\n        { id: 1, name: '이순신', desc: '이마트근처삼' },\n        { id: 2, name: '홍길동', desc: '옆집수퍼에삼' },\n        { id: 3, name: '세종대왕', desc: '홈플러스 근처삼' },\n      ])\n    ); */\n    axios\n      .get('http://localhost:9090/hero/list')\n      .then((res) => {\n        setHeroList(res.data);\n        setLoading(true);\n      })\n      .catch((res, status, error) => {\n        console.log(status);\n        console.log(error);\n      });\n  }, []);\n\n  const heroDescChange = (e) => {\n    setHeroDesc(e.target.value);\n  };\n\n  const onSubmit = (e) => {\n    /*\n        Spring은 데이터를 문자로 받아야 한다\n        Axios는 JSON으로 데이터를 주고 받는다.\n    */\n    e.preventDefault();\n    axios\n      .post('http://localhost:9090/hero/write', {\n        hero_name: hero_name,\n        hero_desc: hero_desc,\n      })\n      .then((res) => {\n        console.log(res.data.result);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    /*\n        form 태그를 통해 서버에 정보를 전송전에 호출된다.\n        버튼의 기본 기능을 정지시킨다. submit버튼의 submit 기능을 막고,\n        별도의 처리를 한다.\n    */\n  };\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <h1>영웅</h1>\n        이름 : <input type=\"text\" onChange={heroNameChange}></input>\n        업적 : <input type=\"text\" onChange={heroDescChange}></input>\n        <button>추가</button>\n      </form>\n      <div>\n        {hero_name} {hero_desc}\n      </div>\n    </div>\n  );\n}\n\nexport default HeroWrite;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}