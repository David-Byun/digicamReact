{"ast":null,"code":"var _jsxFileName = \"/Users/david/digiReact/react0412/src/HelloWrite.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HeroWrite(props) {\n  _s();\n  const [hero_name, setHeroName] = useState('');\n  const [hero_desc, setHeroDesc] = useState('');\n  const heroNameChange = e => {\n    setHeroName(e.target.value);\n  };\n  const heroDescChange = e => {\n    setHeroDesc(e.target.value);\n  };\n  const onSubmit = e => {\n    /*\n        Spring은 데이터를 문자로 받아야 한다\n        Axios는 JSON으로 데이터를 주고 받는다.\n    */\n    e.preventDefault();\n    axios.post('http://localhost:9090/hero/write', {\n      hero_name: hero_name,\n      hero_desc: hero_desc\n    }).then(res => {}).catch((res, status, error) => {\n      console.log(res);\n    });\n    /*\n        form 태그를 통해 서버에 정보를 전송전에 호출된다.\n        버튼의 기본 기능을 정지시킨다. submit버튼의 submit 기능을 막고,\n        별도의 처리를 한다.\n    */\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC601\\uC6C5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \"\\uC774\\uB984 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: heroNameChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this), \"\\uC5C5\\uC801 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: heroDescChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: onSubmit,\n      children: \"\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [hero_name, \" \", hero_desc]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(HeroWrite, \"l6UvxhWTDcZ9qw/do8ker5m3piI=\");\n_c = HeroWrite;\nexport default HeroWrite;\nvar _c;\n$RefreshReg$(_c, \"HeroWrite\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","HeroWrite","props","_s","hero_name","setHeroName","hero_desc","setHeroDesc","heroNameChange","e","target","value","heroDescChange","onSubmit","preventDefault","post","then","res","catch","status","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/david/digiReact/react0412/src/HelloWrite.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nfunction HeroWrite(props) {\n  const [hero_name, setHeroName] = useState('');\n  const [hero_desc, setHeroDesc] = useState('');\n  const heroNameChange = (e) => {\n    setHeroName(e.target.value);\n  };\n\n  const heroDescChange = (e) => {\n    setHeroDesc(e.target.value);\n  };\n\n  const onSubmit = (e) => {\n    /*\n        Spring은 데이터를 문자로 받아야 한다\n        Axios는 JSON으로 데이터를 주고 받는다.\n    */\n    e.preventDefault();\n    axios\n      .post('http://localhost:9090/hero/write', {\n        hero_name: hero_name,\n        hero_desc: hero_desc,\n      })\n      .then((res) => {})\n      .catch((res, status, error) => {\n        console.log(res);\n      });\n    /*\n        form 태그를 통해 서버에 정보를 전송전에 호출된다.\n        버튼의 기본 기능을 정지시킨다. submit버튼의 submit 기능을 막고,\n        별도의 처리를 한다.\n    */\n  };\n  return (\n    <div>\n      <h1>영웅</h1>\n      이름 : <input type=\"text\" onChange={heroNameChange}></input>\n      업적 : <input type=\"text\" onChange={heroDescChange}></input>\n      <button type=\"button\" onClick={onSubmit}>\n        추가\n      </button>\n      <div>\n        {hero_name} {hero_desc}\n      </div>\n    </div>\n  );\n}\n\nexport default HeroWrite;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACS,SAAS,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAMW,cAAc,GAAIC,CAAC,IAAK;IAC5BJ,WAAW,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMC,cAAc,GAAIH,CAAC,IAAK;IAC5BF,WAAW,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAME,QAAQ,GAAIJ,CAAC,IAAK;IACtB;AACJ;AACA;AACA;IACIA,CAAC,CAACK,cAAc,EAAE;IAClBhB,KAAK,CACFiB,IAAI,CAAC,kCAAkC,EAAE;MACxCX,SAAS,EAAEA,SAAS;MACpBE,SAAS,EAAEA;IACb,CAAC,CAAC,CACDU,IAAI,CAAEC,GAAG,IAAK,CAAC,CAAC,CAAC,CACjBC,KAAK,CAAC,CAACD,GAAG,EAAEE,MAAM,EAAEC,KAAK,KAAK;MAC7BC,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;IAClB,CAAC,CAAC;IACJ;AACJ;AACA;AACA;AACA;EACE,CAAC;;EACD,oBACEjB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,mBACN,eAAA3B,OAAA;MAAO4B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAErB;IAAe;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,mBACrD,eAAA3B,OAAA;MAAO4B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEjB;IAAe;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAC1D3B,OAAA;MAAQ4B,IAAI,EAAC,QAAQ;MAACE,OAAO,EAAEjB,QAAS;MAAAU,QAAA,EAAC;IAEzC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACT3B,OAAA;MAAAuB,QAAA,GACGnB,SAAS,EAAC,GAAC,EAACE,SAAS;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAClB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAACxB,EAAA,CA7CQF,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AA+ClB,eAAeA,SAAS;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}