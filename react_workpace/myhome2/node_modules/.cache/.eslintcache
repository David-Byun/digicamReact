[{"/Users/david/digiReact/react_workpace/myhome2/src/index.js":"1","/Users/david/digiReact/react_workpace/myhome2/src/App.js":"2","/Users/david/digiReact/react_workpace/myhome2/src/layout/Layout.js":"3","/Users/david/digiReact/react_workpace/myhome2/src/component/Home.js":"4","/Users/david/digiReact/react_workpace/myhome2/src/CommonUtil.js":"5","/Users/david/digiReact/react_workpace/myhome2/src/component/HeroList.js":"6","/Users/david/digiReact/react_workpace/myhome2/src/component/HeroWrite.js":"7","/Users/david/digiReact/react_workpace/myhome2/src/component/BoardList.js":"8","/Users/david/digiReact/react_workpace/myhome2/src/component/BoardWrite.js":"9","/Users/david/digiReact/react_workpace/myhome2/src/component/BoardView.js":"10"},{"size":298,"mtime":1681430678653,"results":"11","hashOfConfig":"12"},{"size":936,"mtime":1681707700810,"results":"13","hashOfConfig":"12"},{"size":1191,"mtime":1681452666647,"results":"14","hashOfConfig":"12"},{"size":1744,"mtime":1681430678653,"results":"15","hashOfConfig":"12"},{"size":72,"mtime":1681430678652,"results":"16","hashOfConfig":"12"},{"size":2811,"mtime":1681452781623,"results":"17","hashOfConfig":"12"},{"size":3513,"mtime":1681452846792,"results":"18","hashOfConfig":"12"},{"size":4060,"mtime":1681706601111,"results":"19","hashOfConfig":"12"},{"size":4821,"mtime":1681707942639,"results":"20","hashOfConfig":"12"},{"size":5540,"mtime":1681708586324,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1nwb4s6",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/david/digiReact/react_workpace/myhome2/src/index.js",[],[],[],"/Users/david/digiReact/react_workpace/myhome2/src/App.js",[],[],"/Users/david/digiReact/react_workpace/myhome2/src/layout/Layout.js",[],[],"/Users/david/digiReact/react_workpace/myhome2/src/component/Home.js",[],[],"/Users/david/digiReact/react_workpace/myhome2/src/CommonUtil.js",[],[],"/Users/david/digiReact/react_workpace/myhome2/src/component/HeroList.js",["57","58","59","60"],[],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport { SERVERIP } from '../CommonUtil';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link, NavLink } from 'react-router-dom';\n\n/*\n    frontend - Axios(Ajax 라이브러리) 비동기로 서버로 정보를 주고 받는 담당\n    backend - nodejs 기반의 express : 디비서버에 붙어서 데이터 읽고 쓰기\n    frontend 가 heroList 를 요구한다. Axios를 통해서 backend에 요청하면 디비서버에서 데이터 읽어서,\n    json으로 Axios한테 보냄.\n\n    frontend - axios - backend\n*/\nfunction HeroList(props) {\n  const [boardList, setBoardList] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(async () => {\n    async function loadData() {\n      const url = SERVERIP + '/hero/list';\n      await axios\n        .get(url)\n        .then((res) => {\n          setBoardList(res.data);\n          setLoading(true);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    }\n    loadData();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"input-group mb-3\" style={{ marginTop: '20px' }}>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary dropdown-toggle\"\n          data-bs-toggle=\"dropdown\"\n        >\n          선택하세요\n        </button>\n        <ul className=\"dropdown-menu\">\n          <li>\n            <a className=\"dropdown-item\" href=\"#\">\n              제목\n            </a>\n          </li>\n          <li>\n            <a className=\"dropdown-item\" href=\"#\">\n              내용\n            </a>\n          </li>\n          <li>\n            <a className=\"dropdown-item\" href=\"#\">\n              제목+내용\n            </a>\n          </li>\n        </ul>\n        <input type=\"text\" className=\"form-control\" placeholder=\"Search\" />\n        <button className=\"btn btn-secondary\" type=\"submit\">\n          Go\n        </button>\n      </div>\n\n      <table className=\"table table-hover \">\n        <thead className=\"table-secondary\">\n          <tr>\n            <th>Firstname</th>\n            <th>Lastname</th>\n            <th>Email</th>\n          </tr>\n        </thead>\n        <tbody>\n          {loading === true\n            ? boardList.map((item) => {\n                return (\n                  <tr>\n                    <td>{item.id}</td>\n                    <td>\n                      <Link to={'/hero/view/' + item.id}>{item.hero_name}</Link>\n                    </td>\n                    <td>{item.hero_desc}</td>\n                  </tr>\n                );\n              })\n            : ''}\n        </tbody>\n      </table>\n      <div>\n        <NavLink className=\"btn btn-danger\" to=\"/hero/write\">\n          글쓰기\n        </NavLink>\n      </div>\n    </div>\n  );\n}\n\nexport default HeroList;\n","/Users/david/digiReact/react_workpace/myhome2/src/component/HeroWrite.js",["61","62"],[],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport { SERVERIP } from '../CommonUtil';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { NavLink, useNavigate, useParams } from 'react-router-dom';\n\nfunction HeroWrite(props) {\n  let { id } = useParams(); //보내는 쪽에서 json객체로 보냄\n  let history = useNavigate();\n\n  const [heroName, setHeroName] = useState('');\n  const [heroDesc, setHeroDesc] = useState('');\n\n  useEffect(() => {\n    async function loadData() {\n      await axios\n        .get(SERVERIP + '/hero/view/' + id)\n        .then((res) => {\n          setHeroName(res.data.hero.hero_name);\n          setHeroDesc(res.data.hero.hero_desc);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n    if (id != undefined) loadData();\n    //BoardWrite 컴포넌트가 /board/write 일때는 undefined가 오고 /board/view/1 id에는 1이 온다.\n  }, []);\n\n  const nameChange = (e) => {\n    setHeroName(e.target.value);\n  };\n  const descChange = (e) => {\n    setHeroDesc(e.target.value);\n  };\n  //서버로 전송하기\n  const postData = () => {\n    //데이터를 json으로 묶어서 보내야 한다.\n    let data = { hero_name: heroName, hero_desc: heroDesc };\n    axios\n      .post(SERVERIP + '/hero/write', data)\n      .then((res) => history('/hero/list')) //redirect에 대용\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  return (\n    <div className=\"container\" style={{ marginTop: '80px' }}>\n      <h2>게시판 쓰기</h2>\n      <table className=\"table table-hover \" style={{ marginTop: '30px' }}>\n        <colgroup>\n          <col width=\"25%\" />\n          <col width=\"*\" />\n        </colgroup>\n        <tbody style={{ verticalAlign: 'middle' }}>\n          <tr>\n            <td>제목</td>\n            <td>\n              <div className=\"mb-3\" style={{ marginTop: '13px' }}>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  name=\"title\"\n                  placeholder=\"제목을 입력하세요\"\n                  onChange={nameChange}\n                  value={id}\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td>작성자</td>\n            <td>\n              <div className=\"mb-3\" style={{ marginTop: '13px' }}>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"writer\"\n                  name=\"writer\"\n                  placeholder=\"이름을 입력하세요\"\n                  onChange={descChange}\n                  value={heroName}\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td>내용</td>\n            <td>\n              <div className=\"mb-3\" style={{ marginTop: '13px' }}>\n                <textarea\n                  className=\"form-control\"\n                  rows=\"5\"\n                  id=\"contents\"\n                  name=\"contents\"\n                  value={heroDesc}\n                ></textarea>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div className=\"container mt-3\" style={{ textAlign: 'right' }}>\n        <NavLink className=\"btn btn-secondary\" onClick={postData}>\n          등록\n        </NavLink>\n        <NavLink className=\"btn btn-secondary\" to=\"/board\">\n          취소\n        </NavLink>\n      </div>\n    </div>\n  );\n}\n\nexport default HeroWrite;\n","/Users/david/digiReact/react_workpace/myhome2/src/component/BoardList.js",["63","64","65","66","67"],[],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport { SERVERIP } from '../CommonUtil';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link, NavLink, useParams } from 'react-router-dom';\nimport Pagination from 'react-js-pagination';\n\n/*\n    frontend - Axios(Ajax 라이브러리) 비동기로 서버로 정보를 주고 받는 담당\n    backend - nodejs 기반의 express : 디비서버에 붙어서 데이터 읽고 쓰기\n    frontend 가 heroList 를 요구한다. Axios를 통해서 backend에 요청하면 디비서버에서 데이터 읽어서,\n    json으로 Axios한테 보냄.\n\n    frontend - axios - backend\n*/\nfunction BoardList(props) {\n  const [boardList, setBoardList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [totalCnt, setTotalCnt] = useState(0);\n  const [pg, setPg] = useState(0);\n\n  const goPage = (pg) => {\n    setPg(pg);\n    loadData(pg);\n  };\n\n  const loadData = async (pg) => {\n    const url = SERVERIP + '/rest_board/list/' + pg;\n    await axios\n      .get(url)\n      .then((res) => {\n        let totalCnt = res.data.totalCnt;\n        let boardList = res.data.boardList;\n        console.log('데이터전체개수 : ', totalCnt);\n        console.log('데이터 : ', boardList);\n        console.log(res.data);\n\n        setTotalCnt(totalCnt);\n        setBoardList(boardList);\n        setLoading(true);\n        setPg(pg);\n        console.log(res.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    loadData(1);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"input-group mb-3\" style={{ marginTop: '20px' }}>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary dropdown-toggle\"\n          data-bs-toggle=\"dropdown\"\n        >\n          선택하세요\n        </button>\n        <ul className=\"dropdown-menu\">\n          <li>\n            <a className=\"dropdown-item\" href=\"#\">\n              제목\n            </a>\n          </li>\n          <li>\n            <a className=\"dropdown-item\" href=\"#\">\n              내용\n            </a>\n          </li>\n          <li>\n            <a className=\"dropdown-item\" href=\"#\">\n              제목+내용\n            </a>\n          </li>\n        </ul>\n        <input type=\"text\" className=\"form-control\" placeholder=\"Search\" />\n        <button className=\"btn btn-secondary\" type=\"submit\">\n          Go\n        </button>\n      </div>\n\n      <table className=\"table table-hover \">\n        <thead className=\"table-secondary\">\n          <tr>\n            <th>번호</th>\n            <th>제목</th>\n            <th>작성자</th>\n            <th>작성일</th>\n            <th>사진</th>\n          </tr>\n        </thead>\n        <tbody>\n          {loading === true\n            ? boardList.map((item, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{item.id}</td>\n                    <td>\n                      <Link to={'/board/view/' + item.id}>{item.title}</Link>\n                    </td>\n                    <td>{item.writer}</td>\n                    <td>{item.wdate}</td>\n                    <td>\n                      {item.filelink !== null ? (\n                        <img\n                          src={`http://127.0.0.1:9090/${item.filelink}`}\n                          height={'100px'}\n                          width={'100px'}\n                        />\n                      ) : (\n                        ''\n                      )}\n                    </td>\n                  </tr>\n                );\n              })\n            : ''}\n        </tbody>\n      </table>\n      <Pagination\n        activePage={pg}\n        itemsCountPerPage={10}\n        totalItemsCount={totalCnt}\n        pageRangeDisplayed={5}\n        prevPageText={'<'}\n        nextPageText={'>'}\n        onChange={goPage}\n      />\n      <div>\n        <NavLink className=\"btn btn-danger\" to=\"/board/write\">\n          글쓰기\n        </NavLink>\n      </div>\n    </div>\n  );\n}\n\nexport default BoardList;\n",[],"/Users/david/digiReact/react_workpace/myhome2/src/component/BoardWrite.js",["68","69","70"],[],"/Users/david/digiReact/react_workpace/myhome2/src/component/BoardView.js",["71","72"],[],{"ruleId":"73","severity":1,"message":"74","line":19,"column":13,"nodeType":"75","endLine":33,"endColumn":4},{"ruleId":"76","severity":1,"message":"77","line":47,"column":13,"nodeType":"78","endLine":47,"endColumn":51},{"ruleId":"76","severity":1,"message":"77","line":52,"column":13,"nodeType":"78","endLine":52,"endColumn":51},{"ruleId":"76","severity":1,"message":"77","line":57,"column":13,"nodeType":"78","endLine":57,"endColumn":51},{"ruleId":"79","severity":1,"message":"80","line":26,"column":12,"nodeType":"81","messageId":"82","endLine":26,"endColumn":14},{"ruleId":"73","severity":1,"message":"83","line":28,"column":6,"nodeType":"84","endLine":28,"endColumn":8,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":5,"column":25,"nodeType":"88","messageId":"89","endLine":5,"endColumn":34},{"ruleId":"76","severity":1,"message":"77","line":65,"column":13,"nodeType":"78","endLine":65,"endColumn":51},{"ruleId":"76","severity":1,"message":"77","line":70,"column":13,"nodeType":"78","endLine":70,"endColumn":51},{"ruleId":"76","severity":1,"message":"77","line":75,"column":13,"nodeType":"78","endLine":75,"endColumn":51},{"ruleId":"90","severity":1,"message":"91","line":109,"column":25,"nodeType":"78","endLine":113,"endColumn":27},{"ruleId":"79","severity":1,"message":"80","line":29,"column":12,"nodeType":"81","messageId":"82","endLine":29,"endColumn":14},{"ruleId":"73","severity":1,"message":"83","line":31,"column":6,"nodeType":"84","endLine":31,"endColumn":8,"suggestions":"92"},{"ruleId":"86","severity":1,"message":"93","line":36,"column":9,"nodeType":"88","messageId":"89","endLine":36,"endColumn":21},{"ruleId":"79","severity":1,"message":"80","line":35,"column":12,"nodeType":"81","messageId":"82","endLine":35,"endColumn":14},{"ruleId":"73","severity":1,"message":"83","line":37,"column":6,"nodeType":"84","endLine":37,"endColumn":8,"suggestions":"94"},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["95"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["96"],"'writerChange' is assigned a value but never used.",["97"],{"desc":"98","fix":"99"},{"desc":"98","fix":"100"},{"desc":"98","fix":"101"},"Update the dependencies array to be: [id]",{"range":"102","text":"103"},{"range":"104","text":"103"},{"range":"105","text":"103"},[880,882],"[id]",[951,953],[1072,1074]]